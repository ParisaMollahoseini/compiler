Terminals unused in grammar

   ISHIGHERANDEQ
   ISHIGHER
   ISLOWERANDEQ
   ISLOWER
   '*'
   '/'
   '['
   ']'
   VALUE_ID
   MULTI_COMMENT
   COMMENT
   CONTINUE
   BREAK
   MAIN
   FOR
   NUM


Grammar

    0 $accept: PROGRAM $end

    1 $@1: /* empty */

    2 $@2: /* empty */

    3 $@3: /* empty */

    4 PROGRAM: FTYPE ID $@1 '(' PARAMS $@2 ')' '{' STMTS '}' $@3 PROGRAM
    5        | /* empty */

    6 FTYPE: VOID
    7      | INT

    8 PARAMS: /* empty */
    9       | VTYPE ID
   10       | THREE_ID ',' VTYPE ID
   11       | THREE_ID THREE_ID_COMMA ',' VTYPE ID
   12       | THREE_ID THREE_ID_COMMA THREE_ID_COMMA ',' VTYPE ID

   13 VTYPE: CHAR
   14      | INT

   15 THREE_ID: VTYPE ID

   16 THREE_ID_COMMA: ',' VTYPE ID

   17 STMTS: DECLARE_STMT
   18      | ASSIGN_STMT
   19      | WHILE_STMT
   20      | IF_STMT
   21      | FUNC_CALL
   22      | RETURN_STMT
   23      | /* empty */

   24 $@4: /* empty */

   25 DECLARE_STMT: INT ID $@4 IDS '$' STMTS

   26 $@5: /* empty */

   27 DECLARE_STMT: INT ID EQ EXP $@5 '$' STMTS

   28 $@6: /* empty */

   29 DECLARE_STMT: CHAR ID $@6 IDS '$' STMTS

   30 $@7: /* empty */

   31 DECLARE_STMT: CHAR ID EQ EXP $@7 '$' STMTS

   32 IDS: /* empty */

   33 $@8: /* empty */

   34 IDS: ',' ID $@8 IDS

   35 $@9: /* empty */

   36 ASSIGN_STMT: ID EQ EXP '$' $@9 STMTS

   37 $@10: /* empty */

   38 $@11: /* empty */

   39 WHILE_STMT: WHILE $@10 '(' EXP ')' '{' STMTS '}' $@11 STMTS

   40 $@12: /* empty */

   41 $@13: /* empty */

   42 IF_STMT: IF $@12 '(' EXP ')' '{' STMTS '}' ELSEIF_STMT ELSE_STMT $@13 STMTS

   43 $@14: /* empty */

   44 $@15: /* empty */

   45 ELSEIF_STMT: ELSEIF $@14 '(' EXP ')' '{' STMTS '}' $@15 ELSEIF
   46            | /* empty */

   47 $@16: /* empty */

   48 ELSE_STMT: ELSE $@16 '{' STMTS '}'
   49          | /* empty */

   50 $@17: /* empty */

   51 $@18: /* empty */

   52 FUNC_CALL: ID $@17 '(' ARGS_IN ')' '$' $@18 STMTS

   53 ARGS_IN: /* empty */
   54        | EXP ',' EXP ',' EXP ',' EXP
   55        | EXP ',' EXP ',' EXP
   56        | EXP ',' EXP
   57        | EXP

   58 $@19: /* empty */

   59 RETURN_STMT: RETURN EXP '$' $@19 STMTS

   60 EXP: EXP ISEQ EXP
   61    | EXP ISNOTEQ EXP
   62    | EXP '+' EXP
   63    | EXP '-' EXP
   64    | INTVAL
   65    | EXP COND_AND EXP
   66    | EXP COND_OR EXP
   67    | EXP LOG_OR EXP
   68    | EXP LOG_AND EXP
   69    | EXP LOG_XOR EXP
   70    | NOT EXP
   71    | '(' EXP ')'
   72    | char_val
   73    | ID
   74    | '-' EXP
   75    | FUNC_CALL


Terminals, with rules where they appear

$end (0) 0
'$' (36) 25 27 29 31 36 52 59
'(' (40) 4 39 42 45 52 71
')' (41) 4 39 42 45 52 71
'*' (42)
'+' (43) 62
',' (44) 10 11 12 16 34 54 55 56
'-' (45) 63 74
'/' (47)
'[' (91)
']' (93)
'{' (123) 4 39 42 45 48
'}' (125) 4 39 42 45 48
error (256)
INTVAL (258) 64
char_val (259) 72
COND_OR (260) 66
COND_AND (261) 65
LOG_OR (262) 67
LOG_XOR (263) 69
LOG_AND (264) 68
ISNOTEQ (265) 61
ISEQ (266) 60
ISHIGHERANDEQ (267)
ISHIGHER (268)
ISLOWERANDEQ (269)
ISLOWER (270)
NOT (271) 70
VALUE_ID (272)
EQ (273) 27 31 36
MULTI_COMMENT (274)
COMMENT (275)
CHAR (276) 13 29 31
INT (277) 7 14 25 27
CONTINUE (278)
BREAK (279)
RETURN (280) 59
MAIN (281)
FOR (282)
VOID (283) 6
ELSE (284) 48
ELSEIF (285) 45
WHILE (286) 39
IF (287) 42
NUM (288)
ID (289) 4 9 10 11 12 15 16 25 27 29 31 34 36 52 73


Nonterminals, with rules where they appear

$accept (47)
    on left: 0
EXP (48)
    on left: 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75, on right:
    27 31 36 39 42 45 54 55 56 57 59 60 61 62 63 65 66 67 68 69 70
    71 74
FTYPE (49)
    on left: 6 7, on right: 4
VTYPE (50)
    on left: 13 14, on right: 9 10 11 12 15 16
PARAMS (51)
    on left: 8 9 10 11 12, on right: 4
FUNC_CALL (52)
    on left: 52, on right: 21 75
ARGS_IN (53)
    on left: 53 54 55 56 57, on right: 52
PROGRAM (54)
    on left: 4 5, on right: 0 4
$@1 (55)
    on left: 1, on right: 4
$@2 (56)
    on left: 2, on right: 4
$@3 (57)
    on left: 3, on right: 4
THREE_ID (58)
    on left: 15, on right: 10 11 12
THREE_ID_COMMA (59)
    on left: 16, on right: 11 12
STMTS (60)
    on left: 17 18 19 20 21 22 23, on right: 4 25 27 29 31 36 39 42
    45 48 52 59
DECLARE_STMT (61)
    on left: 25 27 29 31, on right: 17
$@4 (62)
    on left: 24, on right: 25
$@5 (63)
    on left: 26, on right: 27
$@6 (64)
    on left: 28, on right: 29
$@7 (65)
    on left: 30, on right: 31
IDS (66)
    on left: 32 34, on right: 25 29 34
$@8 (67)
    on left: 33, on right: 34
ASSIGN_STMT (68)
    on left: 36, on right: 18
$@9 (69)
    on left: 35, on right: 36
WHILE_STMT (70)
    on left: 39, on right: 19
$@10 (71)
    on left: 37, on right: 39
$@11 (72)
    on left: 38, on right: 39
IF_STMT (73)
    on left: 42, on right: 20
$@12 (74)
    on left: 40, on right: 42
$@13 (75)
    on left: 41, on right: 42
ELSEIF_STMT (76)
    on left: 45 46, on right: 42
$@14 (77)
    on left: 43, on right: 45
$@15 (78)
    on left: 44, on right: 45
ELSE_STMT (79)
    on left: 48 49, on right: 42
$@16 (80)
    on left: 47, on right: 48
$@17 (81)
    on left: 50, on right: 52
$@18 (82)
    on left: 51, on right: 52
RETURN_STMT (83)
    on left: 59, on right: 22
$@19 (84)
    on left: 58, on right: 59


state 0

    0 $accept: . PROGRAM $end

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    $default  reduce using rule 5 (PROGRAM)

    FTYPE    go to state 3
    PROGRAM  go to state 4


state 1

    7 FTYPE: INT .

    $default  reduce using rule 7 (FTYPE)


state 2

    6 FTYPE: VOID .

    $default  reduce using rule 6 (FTYPE)


state 3

    4 PROGRAM: FTYPE . ID $@1 '(' PARAMS $@2 ')' '{' STMTS '}' $@3 PROGRAM

    ID  shift, and go to state 5


state 4

    0 $accept: PROGRAM . $end

    $end  shift, and go to state 6


state 5

    4 PROGRAM: FTYPE ID . $@1 '(' PARAMS $@2 ')' '{' STMTS '}' $@3 PROGRAM

    $default  reduce using rule 1 ($@1)

    $@1  go to state 7


state 6

    0 $accept: PROGRAM $end .

    $default  accept


state 7

    4 PROGRAM: FTYPE ID $@1 . '(' PARAMS $@2 ')' '{' STMTS '}' $@3 PROGRAM

    '('  shift, and go to state 8


state 8

    4 PROGRAM: FTYPE ID $@1 '(' . PARAMS $@2 ')' '{' STMTS '}' $@3 PROGRAM

    CHAR  shift, and go to state 9
    INT   shift, and go to state 10

    $default  reduce using rule 8 (PARAMS)

    VTYPE     go to state 11
    PARAMS    go to state 12
    THREE_ID  go to state 13


state 9

   13 VTYPE: CHAR .

    $default  reduce using rule 13 (VTYPE)


state 10

   14 VTYPE: INT .

    $default  reduce using rule 14 (VTYPE)


state 11

    9 PARAMS: VTYPE . ID
   15 THREE_ID: VTYPE . ID

    ID  shift, and go to state 14


state 12

    4 PROGRAM: FTYPE ID $@1 '(' PARAMS . $@2 ')' '{' STMTS '}' $@3 PROGRAM

    $default  reduce using rule 2 ($@2)

    $@2  go to state 15


state 13

   10 PARAMS: THREE_ID . ',' VTYPE ID
   11       | THREE_ID . THREE_ID_COMMA ',' VTYPE ID
   12       | THREE_ID . THREE_ID_COMMA THREE_ID_COMMA ',' VTYPE ID

    ','  shift, and go to state 16

    THREE_ID_COMMA  go to state 17


state 14

    9 PARAMS: VTYPE ID .
   15 THREE_ID: VTYPE ID .

    ','       reduce using rule 15 (THREE_ID)
    $default  reduce using rule 9 (PARAMS)


state 15

    4 PROGRAM: FTYPE ID $@1 '(' PARAMS $@2 . ')' '{' STMTS '}' $@3 PROGRAM

    ')'  shift, and go to state 18


state 16

   10 PARAMS: THREE_ID ',' . VTYPE ID
   16 THREE_ID_COMMA: ',' . VTYPE ID

    CHAR  shift, and go to state 9
    INT   shift, and go to state 10

    VTYPE  go to state 19


state 17

   11 PARAMS: THREE_ID THREE_ID_COMMA . ',' VTYPE ID
   12       | THREE_ID THREE_ID_COMMA . THREE_ID_COMMA ',' VTYPE ID

    ','  shift, and go to state 20

    THREE_ID_COMMA  go to state 21


state 18

    4 PROGRAM: FTYPE ID $@1 '(' PARAMS $@2 ')' . '{' STMTS '}' $@3 PROGRAM

    '{'  shift, and go to state 22


state 19

   10 PARAMS: THREE_ID ',' VTYPE . ID
   16 THREE_ID_COMMA: ',' VTYPE . ID

    ID  shift, and go to state 23


state 20

   11 PARAMS: THREE_ID THREE_ID_COMMA ',' . VTYPE ID
   16 THREE_ID_COMMA: ',' . VTYPE ID

    CHAR  shift, and go to state 9
    INT   shift, and go to state 10

    VTYPE  go to state 24


state 21

   12 PARAMS: THREE_ID THREE_ID_COMMA THREE_ID_COMMA . ',' VTYPE ID

    ','  shift, and go to state 25


state 22

    4 PROGRAM: FTYPE ID $@1 '(' PARAMS $@2 ')' '{' . STMTS '}' $@3 PROGRAM

    CHAR    shift, and go to state 26
    INT     shift, and go to state 27
    RETURN  shift, and go to state 28
    WHILE   shift, and go to state 29
    IF      shift, and go to state 30
    ID      shift, and go to state 31

    $default  reduce using rule 23 (STMTS)

    FUNC_CALL     go to state 32
    STMTS         go to state 33
    DECLARE_STMT  go to state 34
    ASSIGN_STMT   go to state 35
    WHILE_STMT    go to state 36
    IF_STMT       go to state 37
    RETURN_STMT   go to state 38


state 23

   10 PARAMS: THREE_ID ',' VTYPE ID .
   16 THREE_ID_COMMA: ',' VTYPE ID .

    ','       reduce using rule 16 (THREE_ID_COMMA)
    $default  reduce using rule 10 (PARAMS)


state 24

   11 PARAMS: THREE_ID THREE_ID_COMMA ',' VTYPE . ID
   16 THREE_ID_COMMA: ',' VTYPE . ID

    ID  shift, and go to state 39


state 25

   12 PARAMS: THREE_ID THREE_ID_COMMA THREE_ID_COMMA ',' . VTYPE ID

    CHAR  shift, and go to state 9
    INT   shift, and go to state 10

    VTYPE  go to state 40


state 26

   29 DECLARE_STMT: CHAR . ID $@6 IDS '$' STMTS
   31             | CHAR . ID EQ EXP $@7 '$' STMTS

    ID  shift, and go to state 41


state 27

   25 DECLARE_STMT: INT . ID $@4 IDS '$' STMTS
   27             | INT . ID EQ EXP $@5 '$' STMTS

    ID  shift, and go to state 42


state 28

   59 RETURN_STMT: RETURN . EXP '$' $@19 STMTS

    INTVAL    shift, and go to state 43
    char_val  shift, and go to state 44
    '-'       shift, and go to state 45
    NOT       shift, and go to state 46
    '('       shift, and go to state 47
    ID        shift, and go to state 48

    EXP        go to state 49
    FUNC_CALL  go to state 50


state 29

   39 WHILE_STMT: WHILE . $@10 '(' EXP ')' '{' STMTS '}' $@11 STMTS

    $default  reduce using rule 37 ($@10)

    $@10  go to state 51


state 30

   42 IF_STMT: IF . $@12 '(' EXP ')' '{' STMTS '}' ELSEIF_STMT ELSE_STMT $@13 STMTS

    $default  reduce using rule 40 ($@12)

    $@12  go to state 52


state 31

   36 ASSIGN_STMT: ID . EQ EXP '$' $@9 STMTS
   52 FUNC_CALL: ID . $@17 '(' ARGS_IN ')' '$' $@18 STMTS

    EQ  shift, and go to state 53

    $default  reduce using rule 50 ($@17)

    $@17  go to state 54


state 32

   21 STMTS: FUNC_CALL .

    $default  reduce using rule 21 (STMTS)


state 33

    4 PROGRAM: FTYPE ID $@1 '(' PARAMS $@2 ')' '{' STMTS . '}' $@3 PROGRAM

    '}'  shift, and go to state 55


state 34

   17 STMTS: DECLARE_STMT .

    $default  reduce using rule 17 (STMTS)


state 35

   18 STMTS: ASSIGN_STMT .

    $default  reduce using rule 18 (STMTS)


state 36

   19 STMTS: WHILE_STMT .

    $default  reduce using rule 19 (STMTS)


state 37

   20 STMTS: IF_STMT .

    $default  reduce using rule 20 (STMTS)


state 38

   22 STMTS: RETURN_STMT .

    $default  reduce using rule 22 (STMTS)


state 39

   11 PARAMS: THREE_ID THREE_ID_COMMA ',' VTYPE ID .
   16 THREE_ID_COMMA: ',' VTYPE ID .

    ','       reduce using rule 16 (THREE_ID_COMMA)
    $default  reduce using rule 11 (PARAMS)


state 40

   12 PARAMS: THREE_ID THREE_ID_COMMA THREE_ID_COMMA ',' VTYPE . ID

    ID  shift, and go to state 56


state 41

   29 DECLARE_STMT: CHAR ID . $@6 IDS '$' STMTS
   31             | CHAR ID . EQ EXP $@7 '$' STMTS

    EQ  shift, and go to state 57

    $default  reduce using rule 28 ($@6)

    $@6  go to state 58


state 42

   25 DECLARE_STMT: INT ID . $@4 IDS '$' STMTS
   27             | INT ID . EQ EXP $@5 '$' STMTS

    EQ  shift, and go to state 59

    $default  reduce using rule 24 ($@4)

    $@4  go to state 60


state 43

   64 EXP: INTVAL .

    $default  reduce using rule 64 (EXP)


state 44

   72 EXP: char_val .

    $default  reduce using rule 72 (EXP)


state 45

   74 EXP: '-' . EXP

    INTVAL    shift, and go to state 43
    char_val  shift, and go to state 44
    '-'       shift, and go to state 45
    NOT       shift, and go to state 46
    '('       shift, and go to state 47
    ID        shift, and go to state 48

    EXP        go to state 61
    FUNC_CALL  go to state 50


state 46

   70 EXP: NOT . EXP

    INTVAL    shift, and go to state 43
    char_val  shift, and go to state 44
    '-'       shift, and go to state 45
    NOT       shift, and go to state 46
    '('       shift, and go to state 47
    ID        shift, and go to state 48

    EXP        go to state 62
    FUNC_CALL  go to state 50


state 47

   71 EXP: '(' . EXP ')'

    INTVAL    shift, and go to state 43
    char_val  shift, and go to state 44
    '-'       shift, and go to state 45
    NOT       shift, and go to state 46
    '('       shift, and go to state 47
    ID        shift, and go to state 48

    EXP        go to state 63
    FUNC_CALL  go to state 50


state 48

   52 FUNC_CALL: ID . $@17 '(' ARGS_IN ')' '$' $@18 STMTS
   73 EXP: ID .

    '('       reduce using rule 50 ($@17)
    $default  reduce using rule 73 (EXP)

    $@17  go to state 54


state 49

   59 RETURN_STMT: RETURN EXP . '$' $@19 STMTS
   60 EXP: EXP . ISEQ EXP
   61    | EXP . ISNOTEQ EXP
   62    | EXP . '+' EXP
   63    | EXP . '-' EXP
   65    | EXP . COND_AND EXP
   66    | EXP . COND_OR EXP
   67    | EXP . LOG_OR EXP
   68    | EXP . LOG_AND EXP
   69    | EXP . LOG_XOR EXP

    COND_OR   shift, and go to state 64
    COND_AND  shift, and go to state 65
    LOG_OR    shift, and go to state 66
    LOG_XOR   shift, and go to state 67
    LOG_AND   shift, and go to state 68
    ISNOTEQ   shift, and go to state 69
    ISEQ      shift, and go to state 70
    '+'       shift, and go to state 71
    '-'       shift, and go to state 72
    '$'       shift, and go to state 73


state 50

   75 EXP: FUNC_CALL .

    $default  reduce using rule 75 (EXP)


state 51

   39 WHILE_STMT: WHILE $@10 . '(' EXP ')' '{' STMTS '}' $@11 STMTS

    '('  shift, and go to state 74


state 52

   42 IF_STMT: IF $@12 . '(' EXP ')' '{' STMTS '}' ELSEIF_STMT ELSE_STMT $@13 STMTS

    '('  shift, and go to state 75


state 53

   36 ASSIGN_STMT: ID EQ . EXP '$' $@9 STMTS

    INTVAL    shift, and go to state 43
    char_val  shift, and go to state 44
    '-'       shift, and go to state 45
    NOT       shift, and go to state 46
    '('       shift, and go to state 47
    ID        shift, and go to state 48

    EXP        go to state 76
    FUNC_CALL  go to state 50


state 54

   52 FUNC_CALL: ID $@17 . '(' ARGS_IN ')' '$' $@18 STMTS

    '('  shift, and go to state 77


state 55

    4 PROGRAM: FTYPE ID $@1 '(' PARAMS $@2 ')' '{' STMTS '}' . $@3 PROGRAM

    $default  reduce using rule 3 ($@3)

    $@3  go to state 78


state 56

   12 PARAMS: THREE_ID THREE_ID_COMMA THREE_ID_COMMA ',' VTYPE ID .

    $default  reduce using rule 12 (PARAMS)


state 57

   31 DECLARE_STMT: CHAR ID EQ . EXP $@7 '$' STMTS

    INTVAL    shift, and go to state 43
    char_val  shift, and go to state 44
    '-'       shift, and go to state 45
    NOT       shift, and go to state 46
    '('       shift, and go to state 47
    ID        shift, and go to state 48

    EXP        go to state 79
    FUNC_CALL  go to state 50


state 58

   29 DECLARE_STMT: CHAR ID $@6 . IDS '$' STMTS

    ','  shift, and go to state 80

    $default  reduce using rule 32 (IDS)

    IDS  go to state 81


state 59

   27 DECLARE_STMT: INT ID EQ . EXP $@5 '$' STMTS

    INTVAL    shift, and go to state 43
    char_val  shift, and go to state 44
    '-'       shift, and go to state 45
    NOT       shift, and go to state 46
    '('       shift, and go to state 47
    ID        shift, and go to state 48

    EXP        go to state 82
    FUNC_CALL  go to state 50


state 60

   25 DECLARE_STMT: INT ID $@4 . IDS '$' STMTS

    ','  shift, and go to state 80

    $default  reduce using rule 32 (IDS)

    IDS  go to state 83


state 61

   60 EXP: EXP . ISEQ EXP
   61    | EXP . ISNOTEQ EXP
   62    | EXP . '+' EXP
   63    | EXP . '-' EXP
   65    | EXP . COND_AND EXP
   66    | EXP . COND_OR EXP
   67    | EXP . LOG_OR EXP
   68    | EXP . LOG_AND EXP
   69    | EXP . LOG_XOR EXP
   74    | '-' EXP .

    $default  reduce using rule 74 (EXP)


state 62

   60 EXP: EXP . ISEQ EXP
   61    | EXP . ISNOTEQ EXP
   62    | EXP . '+' EXP
   63    | EXP . '-' EXP
   65    | EXP . COND_AND EXP
   66    | EXP . COND_OR EXP
   67    | EXP . LOG_OR EXP
   68    | EXP . LOG_AND EXP
   69    | EXP . LOG_XOR EXP
   70    | NOT EXP .

    $default  reduce using rule 70 (EXP)


state 63

   60 EXP: EXP . ISEQ EXP
   61    | EXP . ISNOTEQ EXP
   62    | EXP . '+' EXP
   63    | EXP . '-' EXP
   65    | EXP . COND_AND EXP
   66    | EXP . COND_OR EXP
   67    | EXP . LOG_OR EXP
   68    | EXP . LOG_AND EXP
   69    | EXP . LOG_XOR EXP
   71    | '(' EXP . ')'

    COND_OR   shift, and go to state 64
    COND_AND  shift, and go to state 65
    LOG_OR    shift, and go to state 66
    LOG_XOR   shift, and go to state 67
    LOG_AND   shift, and go to state 68
    ISNOTEQ   shift, and go to state 69
    ISEQ      shift, and go to state 70
    '+'       shift, and go to state 71
    '-'       shift, and go to state 72
    ')'       shift, and go to state 84


state 64

   66 EXP: EXP COND_OR . EXP

    INTVAL    shift, and go to state 43
    char_val  shift, and go to state 44
    '-'       shift, and go to state 45
    NOT       shift, and go to state 46
    '('       shift, and go to state 47
    ID        shift, and go to state 48

    EXP        go to state 85
    FUNC_CALL  go to state 50


state 65

   65 EXP: EXP COND_AND . EXP

    INTVAL    shift, and go to state 43
    char_val  shift, and go to state 44
    '-'       shift, and go to state 45
    NOT       shift, and go to state 46
    '('       shift, and go to state 47
    ID        shift, and go to state 48

    EXP        go to state 86
    FUNC_CALL  go to state 50


state 66

   67 EXP: EXP LOG_OR . EXP

    INTVAL    shift, and go to state 43
    char_val  shift, and go to state 44
    '-'       shift, and go to state 45
    NOT       shift, and go to state 46
    '('       shift, and go to state 47
    ID        shift, and go to state 48

    EXP        go to state 87
    FUNC_CALL  go to state 50


state 67

   69 EXP: EXP LOG_XOR . EXP

    INTVAL    shift, and go to state 43
    char_val  shift, and go to state 44
    '-'       shift, and go to state 45
    NOT       shift, and go to state 46
    '('       shift, and go to state 47
    ID        shift, and go to state 48

    EXP        go to state 88
    FUNC_CALL  go to state 50


state 68

   68 EXP: EXP LOG_AND . EXP

    INTVAL    shift, and go to state 43
    char_val  shift, and go to state 44
    '-'       shift, and go to state 45
    NOT       shift, and go to state 46
    '('       shift, and go to state 47
    ID        shift, and go to state 48

    EXP        go to state 89
    FUNC_CALL  go to state 50


state 69

   61 EXP: EXP ISNOTEQ . EXP

    INTVAL    shift, and go to state 43
    char_val  shift, and go to state 44
    '-'       shift, and go to state 45
    NOT       shift, and go to state 46
    '('       shift, and go to state 47
    ID        shift, and go to state 48

    EXP        go to state 90
    FUNC_CALL  go to state 50


state 70

   60 EXP: EXP ISEQ . EXP

    INTVAL    shift, and go to state 43
    char_val  shift, and go to state 44
    '-'       shift, and go to state 45
    NOT       shift, and go to state 46
    '('       shift, and go to state 47
    ID        shift, and go to state 48

    EXP        go to state 91
    FUNC_CALL  go to state 50


state 71

   62 EXP: EXP '+' . EXP

    INTVAL    shift, and go to state 43
    char_val  shift, and go to state 44
    '-'       shift, and go to state 45
    NOT       shift, and go to state 46
    '('       shift, and go to state 47
    ID        shift, and go to state 48

    EXP        go to state 92
    FUNC_CALL  go to state 50


state 72

   63 EXP: EXP '-' . EXP

    INTVAL    shift, and go to state 43
    char_val  shift, and go to state 44
    '-'       shift, and go to state 45
    NOT       shift, and go to state 46
    '('       shift, and go to state 47
    ID        shift, and go to state 48

    EXP        go to state 93
    FUNC_CALL  go to state 50


state 73

   59 RETURN_STMT: RETURN EXP '$' . $@19 STMTS

    $default  reduce using rule 58 ($@19)

    $@19  go to state 94


state 74

   39 WHILE_STMT: WHILE $@10 '(' . EXP ')' '{' STMTS '}' $@11 STMTS

    INTVAL    shift, and go to state 43
    char_val  shift, and go to state 44
    '-'       shift, and go to state 45
    NOT       shift, and go to state 46
    '('       shift, and go to state 47
    ID        shift, and go to state 48

    EXP        go to state 95
    FUNC_CALL  go to state 50


state 75

   42 IF_STMT: IF $@12 '(' . EXP ')' '{' STMTS '}' ELSEIF_STMT ELSE_STMT $@13 STMTS

    INTVAL    shift, and go to state 43
    char_val  shift, and go to state 44
    '-'       shift, and go to state 45
    NOT       shift, and go to state 46
    '('       shift, and go to state 47
    ID        shift, and go to state 48

    EXP        go to state 96
    FUNC_CALL  go to state 50


state 76

   36 ASSIGN_STMT: ID EQ EXP . '$' $@9 STMTS
   60 EXP: EXP . ISEQ EXP
   61    | EXP . ISNOTEQ EXP
   62    | EXP . '+' EXP
   63    | EXP . '-' EXP
   65    | EXP . COND_AND EXP
   66    | EXP . COND_OR EXP
   67    | EXP . LOG_OR EXP
   68    | EXP . LOG_AND EXP
   69    | EXP . LOG_XOR EXP

    COND_OR   shift, and go to state 64
    COND_AND  shift, and go to state 65
    LOG_OR    shift, and go to state 66
    LOG_XOR   shift, and go to state 67
    LOG_AND   shift, and go to state 68
    ISNOTEQ   shift, and go to state 69
    ISEQ      shift, and go to state 70
    '+'       shift, and go to state 71
    '-'       shift, and go to state 72
    '$'       shift, and go to state 97


state 77

   52 FUNC_CALL: ID $@17 '(' . ARGS_IN ')' '$' $@18 STMTS

    INTVAL    shift, and go to state 43
    char_val  shift, and go to state 44
    '-'       shift, and go to state 45
    NOT       shift, and go to state 46
    '('       shift, and go to state 47
    ID        shift, and go to state 48

    $default  reduce using rule 53 (ARGS_IN)

    EXP        go to state 98
    FUNC_CALL  go to state 50
    ARGS_IN    go to state 99


state 78

    4 PROGRAM: FTYPE ID $@1 '(' PARAMS $@2 ')' '{' STMTS '}' $@3 . PROGRAM

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    $default  reduce using rule 5 (PROGRAM)

    FTYPE    go to state 3
    PROGRAM  go to state 100


state 79

   31 DECLARE_STMT: CHAR ID EQ EXP . $@7 '$' STMTS
   60 EXP: EXP . ISEQ EXP
   61    | EXP . ISNOTEQ EXP
   62    | EXP . '+' EXP
   63    | EXP . '-' EXP
   65    | EXP . COND_AND EXP
   66    | EXP . COND_OR EXP
   67    | EXP . LOG_OR EXP
   68    | EXP . LOG_AND EXP
   69    | EXP . LOG_XOR EXP

    COND_OR   shift, and go to state 64
    COND_AND  shift, and go to state 65
    LOG_OR    shift, and go to state 66
    LOG_XOR   shift, and go to state 67
    LOG_AND   shift, and go to state 68
    ISNOTEQ   shift, and go to state 69
    ISEQ      shift, and go to state 70
    '+'       shift, and go to state 71
    '-'       shift, and go to state 72

    $default  reduce using rule 30 ($@7)

    $@7  go to state 101


state 80

   34 IDS: ',' . ID $@8 IDS

    ID  shift, and go to state 102


state 81

   29 DECLARE_STMT: CHAR ID $@6 IDS . '$' STMTS

    '$'  shift, and go to state 103


state 82

   27 DECLARE_STMT: INT ID EQ EXP . $@5 '$' STMTS
   60 EXP: EXP . ISEQ EXP
   61    | EXP . ISNOTEQ EXP
   62    | EXP . '+' EXP
   63    | EXP . '-' EXP
   65    | EXP . COND_AND EXP
   66    | EXP . COND_OR EXP
   67    | EXP . LOG_OR EXP
   68    | EXP . LOG_AND EXP
   69    | EXP . LOG_XOR EXP

    COND_OR   shift, and go to state 64
    COND_AND  shift, and go to state 65
    LOG_OR    shift, and go to state 66
    LOG_XOR   shift, and go to state 67
    LOG_AND   shift, and go to state 68
    ISNOTEQ   shift, and go to state 69
    ISEQ      shift, and go to state 70
    '+'       shift, and go to state 71
    '-'       shift, and go to state 72

    $default  reduce using rule 26 ($@5)

    $@5  go to state 104


state 83

   25 DECLARE_STMT: INT ID $@4 IDS . '$' STMTS

    '$'  shift, and go to state 105


state 84

   71 EXP: '(' EXP ')' .

    $default  reduce using rule 71 (EXP)


state 85

   60 EXP: EXP . ISEQ EXP
   61    | EXP . ISNOTEQ EXP
   62    | EXP . '+' EXP
   63    | EXP . '-' EXP
   65    | EXP . COND_AND EXP
   66    | EXP . COND_OR EXP
   66    | EXP COND_OR EXP .
   67    | EXP . LOG_OR EXP
   68    | EXP . LOG_AND EXP
   69    | EXP . LOG_XOR EXP

    COND_AND  shift, and go to state 65
    LOG_OR    shift, and go to state 66
    LOG_XOR   shift, and go to state 67
    LOG_AND   shift, and go to state 68
    ISNOTEQ   shift, and go to state 69
    ISEQ      shift, and go to state 70
    '+'       shift, and go to state 71
    '-'       shift, and go to state 72

    $default  reduce using rule 66 (EXP)


state 86

   60 EXP: EXP . ISEQ EXP
   61    | EXP . ISNOTEQ EXP
   62    | EXP . '+' EXP
   63    | EXP . '-' EXP
   65    | EXP . COND_AND EXP
   65    | EXP COND_AND EXP .
   66    | EXP . COND_OR EXP
   67    | EXP . LOG_OR EXP
   68    | EXP . LOG_AND EXP
   69    | EXP . LOG_XOR EXP

    LOG_OR   shift, and go to state 66
    LOG_XOR  shift, and go to state 67
    LOG_AND  shift, and go to state 68
    ISNOTEQ  shift, and go to state 69
    ISEQ     shift, and go to state 70
    '+'      shift, and go to state 71
    '-'      shift, and go to state 72

    $default  reduce using rule 65 (EXP)


state 87

   60 EXP: EXP . ISEQ EXP
   61    | EXP . ISNOTEQ EXP
   62    | EXP . '+' EXP
   63    | EXP . '-' EXP
   65    | EXP . COND_AND EXP
   66    | EXP . COND_OR EXP
   67    | EXP . LOG_OR EXP
   67    | EXP LOG_OR EXP .
   68    | EXP . LOG_AND EXP
   69    | EXP . LOG_XOR EXP

    LOG_XOR  shift, and go to state 67
    LOG_AND  shift, and go to state 68
    ISNOTEQ  shift, and go to state 69
    ISEQ     shift, and go to state 70
    '+'      shift, and go to state 71
    '-'      shift, and go to state 72

    $default  reduce using rule 67 (EXP)


state 88

   60 EXP: EXP . ISEQ EXP
   61    | EXP . ISNOTEQ EXP
   62    | EXP . '+' EXP
   63    | EXP . '-' EXP
   65    | EXP . COND_AND EXP
   66    | EXP . COND_OR EXP
   67    | EXP . LOG_OR EXP
   68    | EXP . LOG_AND EXP
   69    | EXP . LOG_XOR EXP
   69    | EXP LOG_XOR EXP .

    LOG_AND  shift, and go to state 68
    ISNOTEQ  shift, and go to state 69
    ISEQ     shift, and go to state 70
    '+'      shift, and go to state 71
    '-'      shift, and go to state 72

    $default  reduce using rule 69 (EXP)


state 89

   60 EXP: EXP . ISEQ EXP
   61    | EXP . ISNOTEQ EXP
   62    | EXP . '+' EXP
   63    | EXP . '-' EXP
   65    | EXP . COND_AND EXP
   66    | EXP . COND_OR EXP
   67    | EXP . LOG_OR EXP
   68    | EXP . LOG_AND EXP
   68    | EXP LOG_AND EXP .
   69    | EXP . LOG_XOR EXP

    ISNOTEQ  shift, and go to state 69
    ISEQ     shift, and go to state 70
    '+'      shift, and go to state 71
    '-'      shift, and go to state 72

    $default  reduce using rule 68 (EXP)


state 90

   60 EXP: EXP . ISEQ EXP
   61    | EXP . ISNOTEQ EXP
   61    | EXP ISNOTEQ EXP .
   62    | EXP . '+' EXP
   63    | EXP . '-' EXP
   65    | EXP . COND_AND EXP
   66    | EXP . COND_OR EXP
   67    | EXP . LOG_OR EXP
   68    | EXP . LOG_AND EXP
   69    | EXP . LOG_XOR EXP

    '+'  shift, and go to state 71
    '-'  shift, and go to state 72

    $default  reduce using rule 61 (EXP)


state 91

   60 EXP: EXP . ISEQ EXP
   60    | EXP ISEQ EXP .
   61    | EXP . ISNOTEQ EXP
   62    | EXP . '+' EXP
   63    | EXP . '-' EXP
   65    | EXP . COND_AND EXP
   66    | EXP . COND_OR EXP
   67    | EXP . LOG_OR EXP
   68    | EXP . LOG_AND EXP
   69    | EXP . LOG_XOR EXP

    '+'  shift, and go to state 71
    '-'  shift, and go to state 72

    $default  reduce using rule 60 (EXP)


state 92

   60 EXP: EXP . ISEQ EXP
   61    | EXP . ISNOTEQ EXP
   62    | EXP . '+' EXP
   62    | EXP '+' EXP .
   63    | EXP . '-' EXP
   65    | EXP . COND_AND EXP
   66    | EXP . COND_OR EXP
   67    | EXP . LOG_OR EXP
   68    | EXP . LOG_AND EXP
   69    | EXP . LOG_XOR EXP

    $default  reduce using rule 62 (EXP)


state 93

   60 EXP: EXP . ISEQ EXP
   61    | EXP . ISNOTEQ EXP
   62    | EXP . '+' EXP
   63    | EXP . '-' EXP
   63    | EXP '-' EXP .
   65    | EXP . COND_AND EXP
   66    | EXP . COND_OR EXP
   67    | EXP . LOG_OR EXP
   68    | EXP . LOG_AND EXP
   69    | EXP . LOG_XOR EXP

    $default  reduce using rule 63 (EXP)


state 94

   59 RETURN_STMT: RETURN EXP '$' $@19 . STMTS

    CHAR    shift, and go to state 26
    INT     shift, and go to state 27
    RETURN  shift, and go to state 28
    WHILE   shift, and go to state 29
    IF      shift, and go to state 30
    ID      shift, and go to state 31

    $default  reduce using rule 23 (STMTS)

    FUNC_CALL     go to state 32
    STMTS         go to state 106
    DECLARE_STMT  go to state 34
    ASSIGN_STMT   go to state 35
    WHILE_STMT    go to state 36
    IF_STMT       go to state 37
    RETURN_STMT   go to state 38


state 95

   39 WHILE_STMT: WHILE $@10 '(' EXP . ')' '{' STMTS '}' $@11 STMTS
   60 EXP: EXP . ISEQ EXP
   61    | EXP . ISNOTEQ EXP
   62    | EXP . '+' EXP
   63    | EXP . '-' EXP
   65    | EXP . COND_AND EXP
   66    | EXP . COND_OR EXP
   67    | EXP . LOG_OR EXP
   68    | EXP . LOG_AND EXP
   69    | EXP . LOG_XOR EXP

    COND_OR   shift, and go to state 64
    COND_AND  shift, and go to state 65
    LOG_OR    shift, and go to state 66
    LOG_XOR   shift, and go to state 67
    LOG_AND   shift, and go to state 68
    ISNOTEQ   shift, and go to state 69
    ISEQ      shift, and go to state 70
    '+'       shift, and go to state 71
    '-'       shift, and go to state 72
    ')'       shift, and go to state 107


state 96

   42 IF_STMT: IF $@12 '(' EXP . ')' '{' STMTS '}' ELSEIF_STMT ELSE_STMT $@13 STMTS
   60 EXP: EXP . ISEQ EXP
   61    | EXP . ISNOTEQ EXP
   62    | EXP . '+' EXP
   63    | EXP . '-' EXP
   65    | EXP . COND_AND EXP
   66    | EXP . COND_OR EXP
   67    | EXP . LOG_OR EXP
   68    | EXP . LOG_AND EXP
   69    | EXP . LOG_XOR EXP

    COND_OR   shift, and go to state 64
    COND_AND  shift, and go to state 65
    LOG_OR    shift, and go to state 66
    LOG_XOR   shift, and go to state 67
    LOG_AND   shift, and go to state 68
    ISNOTEQ   shift, and go to state 69
    ISEQ      shift, and go to state 70
    '+'       shift, and go to state 71
    '-'       shift, and go to state 72
    ')'       shift, and go to state 108


state 97

   36 ASSIGN_STMT: ID EQ EXP '$' . $@9 STMTS

    $default  reduce using rule 35 ($@9)

    $@9  go to state 109


state 98

   54 ARGS_IN: EXP . ',' EXP ',' EXP ',' EXP
   55        | EXP . ',' EXP ',' EXP
   56        | EXP . ',' EXP
   57        | EXP .
   60 EXP: EXP . ISEQ EXP
   61    | EXP . ISNOTEQ EXP
   62    | EXP . '+' EXP
   63    | EXP . '-' EXP
   65    | EXP . COND_AND EXP
   66    | EXP . COND_OR EXP
   67    | EXP . LOG_OR EXP
   68    | EXP . LOG_AND EXP
   69    | EXP . LOG_XOR EXP

    ','       shift, and go to state 110
    COND_OR   shift, and go to state 64
    COND_AND  shift, and go to state 65
    LOG_OR    shift, and go to state 66
    LOG_XOR   shift, and go to state 67
    LOG_AND   shift, and go to state 68
    ISNOTEQ   shift, and go to state 69
    ISEQ      shift, and go to state 70
    '+'       shift, and go to state 71
    '-'       shift, and go to state 72

    $default  reduce using rule 57 (ARGS_IN)


state 99

   52 FUNC_CALL: ID $@17 '(' ARGS_IN . ')' '$' $@18 STMTS

    ')'  shift, and go to state 111


state 100

    4 PROGRAM: FTYPE ID $@1 '(' PARAMS $@2 ')' '{' STMTS '}' $@3 PROGRAM .

    $default  reduce using rule 4 (PROGRAM)


state 101

   31 DECLARE_STMT: CHAR ID EQ EXP $@7 . '$' STMTS

    '$'  shift, and go to state 112


state 102

   34 IDS: ',' ID . $@8 IDS

    $default  reduce using rule 33 ($@8)

    $@8  go to state 113


state 103

   29 DECLARE_STMT: CHAR ID $@6 IDS '$' . STMTS

    CHAR    shift, and go to state 26
    INT     shift, and go to state 27
    RETURN  shift, and go to state 28
    WHILE   shift, and go to state 29
    IF      shift, and go to state 30
    ID      shift, and go to state 31

    $default  reduce using rule 23 (STMTS)

    FUNC_CALL     go to state 32
    STMTS         go to state 114
    DECLARE_STMT  go to state 34
    ASSIGN_STMT   go to state 35
    WHILE_STMT    go to state 36
    IF_STMT       go to state 37
    RETURN_STMT   go to state 38


state 104

   27 DECLARE_STMT: INT ID EQ EXP $@5 . '$' STMTS

    '$'  shift, and go to state 115


state 105

   25 DECLARE_STMT: INT ID $@4 IDS '$' . STMTS

    CHAR    shift, and go to state 26
    INT     shift, and go to state 27
    RETURN  shift, and go to state 28
    WHILE   shift, and go to state 29
    IF      shift, and go to state 30
    ID      shift, and go to state 31

    $default  reduce using rule 23 (STMTS)

    FUNC_CALL     go to state 32
    STMTS         go to state 116
    DECLARE_STMT  go to state 34
    ASSIGN_STMT   go to state 35
    WHILE_STMT    go to state 36
    IF_STMT       go to state 37
    RETURN_STMT   go to state 38


state 106

   59 RETURN_STMT: RETURN EXP '$' $@19 STMTS .

    $default  reduce using rule 59 (RETURN_STMT)


state 107

   39 WHILE_STMT: WHILE $@10 '(' EXP ')' . '{' STMTS '}' $@11 STMTS

    '{'  shift, and go to state 117


state 108

   42 IF_STMT: IF $@12 '(' EXP ')' . '{' STMTS '}' ELSEIF_STMT ELSE_STMT $@13 STMTS

    '{'  shift, and go to state 118


state 109

   36 ASSIGN_STMT: ID EQ EXP '$' $@9 . STMTS

    CHAR    shift, and go to state 26
    INT     shift, and go to state 27
    RETURN  shift, and go to state 28
    WHILE   shift, and go to state 29
    IF      shift, and go to state 30
    ID      shift, and go to state 31

    $default  reduce using rule 23 (STMTS)

    FUNC_CALL     go to state 32
    STMTS         go to state 119
    DECLARE_STMT  go to state 34
    ASSIGN_STMT   go to state 35
    WHILE_STMT    go to state 36
    IF_STMT       go to state 37
    RETURN_STMT   go to state 38


state 110

   54 ARGS_IN: EXP ',' . EXP ',' EXP ',' EXP
   55        | EXP ',' . EXP ',' EXP
   56        | EXP ',' . EXP

    INTVAL    shift, and go to state 43
    char_val  shift, and go to state 44
    '-'       shift, and go to state 45
    NOT       shift, and go to state 46
    '('       shift, and go to state 47
    ID        shift, and go to state 48

    EXP        go to state 120
    FUNC_CALL  go to state 50


state 111

   52 FUNC_CALL: ID $@17 '(' ARGS_IN ')' . '$' $@18 STMTS

    '$'  shift, and go to state 121


state 112

   31 DECLARE_STMT: CHAR ID EQ EXP $@7 '$' . STMTS

    CHAR    shift, and go to state 26
    INT     shift, and go to state 27
    RETURN  shift, and go to state 28
    WHILE   shift, and go to state 29
    IF      shift, and go to state 30
    ID      shift, and go to state 31

    $default  reduce using rule 23 (STMTS)

    FUNC_CALL     go to state 32
    STMTS         go to state 122
    DECLARE_STMT  go to state 34
    ASSIGN_STMT   go to state 35
    WHILE_STMT    go to state 36
    IF_STMT       go to state 37
    RETURN_STMT   go to state 38


state 113

   34 IDS: ',' ID $@8 . IDS

    ','  shift, and go to state 80

    $default  reduce using rule 32 (IDS)

    IDS  go to state 123


state 114

   29 DECLARE_STMT: CHAR ID $@6 IDS '$' STMTS .

    $default  reduce using rule 29 (DECLARE_STMT)


state 115

   27 DECLARE_STMT: INT ID EQ EXP $@5 '$' . STMTS

    CHAR    shift, and go to state 26
    INT     shift, and go to state 27
    RETURN  shift, and go to state 28
    WHILE   shift, and go to state 29
    IF      shift, and go to state 30
    ID      shift, and go to state 31

    $default  reduce using rule 23 (STMTS)

    FUNC_CALL     go to state 32
    STMTS         go to state 124
    DECLARE_STMT  go to state 34
    ASSIGN_STMT   go to state 35
    WHILE_STMT    go to state 36
    IF_STMT       go to state 37
    RETURN_STMT   go to state 38


state 116

   25 DECLARE_STMT: INT ID $@4 IDS '$' STMTS .

    $default  reduce using rule 25 (DECLARE_STMT)


state 117

   39 WHILE_STMT: WHILE $@10 '(' EXP ')' '{' . STMTS '}' $@11 STMTS

    CHAR    shift, and go to state 26
    INT     shift, and go to state 27
    RETURN  shift, and go to state 28
    WHILE   shift, and go to state 29
    IF      shift, and go to state 30
    ID      shift, and go to state 31

    $default  reduce using rule 23 (STMTS)

    FUNC_CALL     go to state 32
    STMTS         go to state 125
    DECLARE_STMT  go to state 34
    ASSIGN_STMT   go to state 35
    WHILE_STMT    go to state 36
    IF_STMT       go to state 37
    RETURN_STMT   go to state 38


state 118

   42 IF_STMT: IF $@12 '(' EXP ')' '{' . STMTS '}' ELSEIF_STMT ELSE_STMT $@13 STMTS

    CHAR    shift, and go to state 26
    INT     shift, and go to state 27
    RETURN  shift, and go to state 28
    WHILE   shift, and go to state 29
    IF      shift, and go to state 30
    ID      shift, and go to state 31

    $default  reduce using rule 23 (STMTS)

    FUNC_CALL     go to state 32
    STMTS         go to state 126
    DECLARE_STMT  go to state 34
    ASSIGN_STMT   go to state 35
    WHILE_STMT    go to state 36
    IF_STMT       go to state 37
    RETURN_STMT   go to state 38


state 119

   36 ASSIGN_STMT: ID EQ EXP '$' $@9 STMTS .

    $default  reduce using rule 36 (ASSIGN_STMT)


state 120

   54 ARGS_IN: EXP ',' EXP . ',' EXP ',' EXP
   55        | EXP ',' EXP . ',' EXP
   56        | EXP ',' EXP .
   60 EXP: EXP . ISEQ EXP
   61    | EXP . ISNOTEQ EXP
   62    | EXP . '+' EXP
   63    | EXP . '-' EXP
   65    | EXP . COND_AND EXP
   66    | EXP . COND_OR EXP
   67    | EXP . LOG_OR EXP
   68    | EXP . LOG_AND EXP
   69    | EXP . LOG_XOR EXP

    ','       shift, and go to state 127
    COND_OR   shift, and go to state 64
    COND_AND  shift, and go to state 65
    LOG_OR    shift, and go to state 66
    LOG_XOR   shift, and go to state 67
    LOG_AND   shift, and go to state 68
    ISNOTEQ   shift, and go to state 69
    ISEQ      shift, and go to state 70
    '+'       shift, and go to state 71
    '-'       shift, and go to state 72

    $default  reduce using rule 56 (ARGS_IN)


state 121

   52 FUNC_CALL: ID $@17 '(' ARGS_IN ')' '$' . $@18 STMTS

    $default  reduce using rule 51 ($@18)

    $@18  go to state 128


state 122

   31 DECLARE_STMT: CHAR ID EQ EXP $@7 '$' STMTS .

    $default  reduce using rule 31 (DECLARE_STMT)


state 123

   34 IDS: ',' ID $@8 IDS .

    $default  reduce using rule 34 (IDS)


state 124

   27 DECLARE_STMT: INT ID EQ EXP $@5 '$' STMTS .

    $default  reduce using rule 27 (DECLARE_STMT)


state 125

   39 WHILE_STMT: WHILE $@10 '(' EXP ')' '{' STMTS . '}' $@11 STMTS

    '}'  shift, and go to state 129


state 126

   42 IF_STMT: IF $@12 '(' EXP ')' '{' STMTS . '}' ELSEIF_STMT ELSE_STMT $@13 STMTS

    '}'  shift, and go to state 130


state 127

   54 ARGS_IN: EXP ',' EXP ',' . EXP ',' EXP
   55        | EXP ',' EXP ',' . EXP

    INTVAL    shift, and go to state 43
    char_val  shift, and go to state 44
    '-'       shift, and go to state 45
    NOT       shift, and go to state 46
    '('       shift, and go to state 47
    ID        shift, and go to state 48

    EXP        go to state 131
    FUNC_CALL  go to state 50


state 128

   52 FUNC_CALL: ID $@17 '(' ARGS_IN ')' '$' $@18 . STMTS

    CHAR    shift, and go to state 26
    INT     shift, and go to state 27
    RETURN  shift, and go to state 28
    WHILE   shift, and go to state 29
    IF      shift, and go to state 30
    ID      shift, and go to state 31

    $default  reduce using rule 23 (STMTS)

    FUNC_CALL     go to state 32
    STMTS         go to state 132
    DECLARE_STMT  go to state 34
    ASSIGN_STMT   go to state 35
    WHILE_STMT    go to state 36
    IF_STMT       go to state 37
    RETURN_STMT   go to state 38


state 129

   39 WHILE_STMT: WHILE $@10 '(' EXP ')' '{' STMTS '}' . $@11 STMTS

    $default  reduce using rule 38 ($@11)

    $@11  go to state 133


state 130

   42 IF_STMT: IF $@12 '(' EXP ')' '{' STMTS '}' . ELSEIF_STMT ELSE_STMT $@13 STMTS

    ELSEIF  shift, and go to state 134

    $default  reduce using rule 46 (ELSEIF_STMT)

    ELSEIF_STMT  go to state 135


state 131

   54 ARGS_IN: EXP ',' EXP ',' EXP . ',' EXP
   55        | EXP ',' EXP ',' EXP .
   60 EXP: EXP . ISEQ EXP
   61    | EXP . ISNOTEQ EXP
   62    | EXP . '+' EXP
   63    | EXP . '-' EXP
   65    | EXP . COND_AND EXP
   66    | EXP . COND_OR EXP
   67    | EXP . LOG_OR EXP
   68    | EXP . LOG_AND EXP
   69    | EXP . LOG_XOR EXP

    ','       shift, and go to state 136
    COND_OR   shift, and go to state 64
    COND_AND  shift, and go to state 65
    LOG_OR    shift, and go to state 66
    LOG_XOR   shift, and go to state 67
    LOG_AND   shift, and go to state 68
    ISNOTEQ   shift, and go to state 69
    ISEQ      shift, and go to state 70
    '+'       shift, and go to state 71
    '-'       shift, and go to state 72

    $default  reduce using rule 55 (ARGS_IN)


state 132

   52 FUNC_CALL: ID $@17 '(' ARGS_IN ')' '$' $@18 STMTS .

    $default  reduce using rule 52 (FUNC_CALL)


state 133

   39 WHILE_STMT: WHILE $@10 '(' EXP ')' '{' STMTS '}' $@11 . STMTS

    CHAR    shift, and go to state 26
    INT     shift, and go to state 27
    RETURN  shift, and go to state 28
    WHILE   shift, and go to state 29
    IF      shift, and go to state 30
    ID      shift, and go to state 31

    $default  reduce using rule 23 (STMTS)

    FUNC_CALL     go to state 32
    STMTS         go to state 137
    DECLARE_STMT  go to state 34
    ASSIGN_STMT   go to state 35
    WHILE_STMT    go to state 36
    IF_STMT       go to state 37
    RETURN_STMT   go to state 38


state 134

   45 ELSEIF_STMT: ELSEIF . $@14 '(' EXP ')' '{' STMTS '}' $@15 ELSEIF

    $default  reduce using rule 43 ($@14)

    $@14  go to state 138


state 135

   42 IF_STMT: IF $@12 '(' EXP ')' '{' STMTS '}' ELSEIF_STMT . ELSE_STMT $@13 STMTS

    ELSE  shift, and go to state 139

    $default  reduce using rule 49 (ELSE_STMT)

    ELSE_STMT  go to state 140


state 136

   54 ARGS_IN: EXP ',' EXP ',' EXP ',' . EXP

    INTVAL    shift, and go to state 43
    char_val  shift, and go to state 44
    '-'       shift, and go to state 45
    NOT       shift, and go to state 46
    '('       shift, and go to state 47
    ID        shift, and go to state 48

    EXP        go to state 141
    FUNC_CALL  go to state 50


state 137

   39 WHILE_STMT: WHILE $@10 '(' EXP ')' '{' STMTS '}' $@11 STMTS .

    $default  reduce using rule 39 (WHILE_STMT)


state 138

   45 ELSEIF_STMT: ELSEIF $@14 . '(' EXP ')' '{' STMTS '}' $@15 ELSEIF

    '('  shift, and go to state 142


state 139

   48 ELSE_STMT: ELSE . $@16 '{' STMTS '}'

    $default  reduce using rule 47 ($@16)

    $@16  go to state 143


state 140

   42 IF_STMT: IF $@12 '(' EXP ')' '{' STMTS '}' ELSEIF_STMT ELSE_STMT . $@13 STMTS

    $default  reduce using rule 41 ($@13)

    $@13  go to state 144


state 141

   54 ARGS_IN: EXP ',' EXP ',' EXP ',' EXP .
   60 EXP: EXP . ISEQ EXP
   61    | EXP . ISNOTEQ EXP
   62    | EXP . '+' EXP
   63    | EXP . '-' EXP
   65    | EXP . COND_AND EXP
   66    | EXP . COND_OR EXP
   67    | EXP . LOG_OR EXP
   68    | EXP . LOG_AND EXP
   69    | EXP . LOG_XOR EXP

    COND_OR   shift, and go to state 64
    COND_AND  shift, and go to state 65
    LOG_OR    shift, and go to state 66
    LOG_XOR   shift, and go to state 67
    LOG_AND   shift, and go to state 68
    ISNOTEQ   shift, and go to state 69
    ISEQ      shift, and go to state 70
    '+'       shift, and go to state 71
    '-'       shift, and go to state 72

    $default  reduce using rule 54 (ARGS_IN)


state 142

   45 ELSEIF_STMT: ELSEIF $@14 '(' . EXP ')' '{' STMTS '}' $@15 ELSEIF

    INTVAL    shift, and go to state 43
    char_val  shift, and go to state 44
    '-'       shift, and go to state 45
    NOT       shift, and go to state 46
    '('       shift, and go to state 47
    ID        shift, and go to state 48

    EXP        go to state 145
    FUNC_CALL  go to state 50


state 143

   48 ELSE_STMT: ELSE $@16 . '{' STMTS '}'

    '{'  shift, and go to state 146


state 144

   42 IF_STMT: IF $@12 '(' EXP ')' '{' STMTS '}' ELSEIF_STMT ELSE_STMT $@13 . STMTS

    CHAR    shift, and go to state 26
    INT     shift, and go to state 27
    RETURN  shift, and go to state 28
    WHILE   shift, and go to state 29
    IF      shift, and go to state 30
    ID      shift, and go to state 31

    $default  reduce using rule 23 (STMTS)

    FUNC_CALL     go to state 32
    STMTS         go to state 147
    DECLARE_STMT  go to state 34
    ASSIGN_STMT   go to state 35
    WHILE_STMT    go to state 36
    IF_STMT       go to state 37
    RETURN_STMT   go to state 38


state 145

   45 ELSEIF_STMT: ELSEIF $@14 '(' EXP . ')' '{' STMTS '}' $@15 ELSEIF
   60 EXP: EXP . ISEQ EXP
   61    | EXP . ISNOTEQ EXP
   62    | EXP . '+' EXP
   63    | EXP . '-' EXP
   65    | EXP . COND_AND EXP
   66    | EXP . COND_OR EXP
   67    | EXP . LOG_OR EXP
   68    | EXP . LOG_AND EXP
   69    | EXP . LOG_XOR EXP

    COND_OR   shift, and go to state 64
    COND_AND  shift, and go to state 65
    LOG_OR    shift, and go to state 66
    LOG_XOR   shift, and go to state 67
    LOG_AND   shift, and go to state 68
    ISNOTEQ   shift, and go to state 69
    ISEQ      shift, and go to state 70
    '+'       shift, and go to state 71
    '-'       shift, and go to state 72
    ')'       shift, and go to state 148


state 146

   48 ELSE_STMT: ELSE $@16 '{' . STMTS '}'

    CHAR    shift, and go to state 26
    INT     shift, and go to state 27
    RETURN  shift, and go to state 28
    WHILE   shift, and go to state 29
    IF      shift, and go to state 30
    ID      shift, and go to state 31

    $default  reduce using rule 23 (STMTS)

    FUNC_CALL     go to state 32
    STMTS         go to state 149
    DECLARE_STMT  go to state 34
    ASSIGN_STMT   go to state 35
    WHILE_STMT    go to state 36
    IF_STMT       go to state 37
    RETURN_STMT   go to state 38


state 147

   42 IF_STMT: IF $@12 '(' EXP ')' '{' STMTS '}' ELSEIF_STMT ELSE_STMT $@13 STMTS .

    $default  reduce using rule 42 (IF_STMT)


state 148

   45 ELSEIF_STMT: ELSEIF $@14 '(' EXP ')' . '{' STMTS '}' $@15 ELSEIF

    '{'  shift, and go to state 150


state 149

   48 ELSE_STMT: ELSE $@16 '{' STMTS . '}'

    '}'  shift, and go to state 151


state 150

   45 ELSEIF_STMT: ELSEIF $@14 '(' EXP ')' '{' . STMTS '}' $@15 ELSEIF

    CHAR    shift, and go to state 26
    INT     shift, and go to state 27
    RETURN  shift, and go to state 28
    WHILE   shift, and go to state 29
    IF      shift, and go to state 30
    ID      shift, and go to state 31

    $default  reduce using rule 23 (STMTS)

    FUNC_CALL     go to state 32
    STMTS         go to state 152
    DECLARE_STMT  go to state 34
    ASSIGN_STMT   go to state 35
    WHILE_STMT    go to state 36
    IF_STMT       go to state 37
    RETURN_STMT   go to state 38


state 151

   48 ELSE_STMT: ELSE $@16 '{' STMTS '}' .

    $default  reduce using rule 48 (ELSE_STMT)


state 152

   45 ELSEIF_STMT: ELSEIF $@14 '(' EXP ')' '{' STMTS . '}' $@15 ELSEIF

    '}'  shift, and go to state 153


state 153

   45 ELSEIF_STMT: ELSEIF $@14 '(' EXP ')' '{' STMTS '}' . $@15 ELSEIF

    $default  reduce using rule 44 ($@15)

    $@15  go to state 154


state 154

   45 ELSEIF_STMT: ELSEIF $@14 '(' EXP ')' '{' STMTS '}' $@15 . ELSEIF

    ELSEIF  shift, and go to state 155


state 155

   45 ELSEIF_STMT: ELSEIF $@14 '(' EXP ')' '{' STMTS '}' $@15 ELSEIF .

    $default  reduce using rule 45 (ELSEIF_STMT)
